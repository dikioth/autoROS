{"ast":null,"code":"import { useState, useEffect, useRef } from 'react'; //\n// A react hook which can be used to load async, disposable resources\n// and fire the cleanup callback when the component unmounts.\n// If the component unmounts before the async operation completes the\n// resource will still be cleaned up once it finishes loading and an\n// abort signal will be issued to the async load operation.\n\nfunction useAbortable(defaultValue, action, cleanup, args) {\n  const [result, setResult] = useState(defaultValue);\n  let controller;\n  useEffect(() => {\n    controller = new AbortController();\n    const promise = action(controller).then(result => {\n      // If we're aborted don't set the result into state.\n      // The cleanup will be called when the component unmounts.\n      if (!controller.signal.aborted) {\n        setResult(result);\n      }\n\n      return result;\n    });\n    return () => {\n      setResult(defaultValue); // on unmount or args changing clean up the old value\n\n      promise.then(cleanup);\n      controller.abort();\n    };\n  }, args);\n  return [result, () => controller.abort()];\n} //\n\n\nfunction useCleanup(teardown) {\n  useEffect(() => {\n    return () => {\n      teardown();\n    };\n  }, []);\n} //\n\n\nfunction useEventListener(target, type, enable, handler, dependencies) {\n  useEffect(() => {\n    if (enable) {\n      target.addEventListener(type, handler);\n      return () => target.removeEventListener(type, handler);\n    }\n  }, [target, type, enable, ...dependencies]);\n} //\n\n\nfunction useAnimationFrame(callback, disable, dependencies) {\n  // persist the requestAnimationFrameId so the last refresh callback can be cancelled when component unmounts\n  const rafId = useRef(); // start the loop when the component mounts and cancel the animation frame when unmounts\n  // or related dependency changes\n\n  function createAnimationFrame(callback) {\n    rafId.current = requestAnimationFrame(timestamp => {\n      createAnimationFrame(callback);\n      return callback(timestamp);\n    });\n  }\n\n  useEffect(() => {\n    if (!disable) {\n      createAnimationFrame(callback);\n    }\n\n    return function cleanup() {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [callback, disable, ...dependencies]);\n} //  Copyright (c) 2018-present, GM Cruise LLC\n\n\nexport { useAbortable, useCleanup, useEventListener, useAnimationFrame };","map":{"version":3,"sources":["../src/useAbortable.js","../src/useCleanup.js","../src/useEventListener.js","../src/useAnimationFrame.js","../src/index.js"],"names":["useState","useEffect","controller","promise","result","setResult","teardown","target","rafId","useRef","requestAnimationFrame","timestamp","createAnimationFrame","callback","cancelAnimationFrame"],"mappings":"qDACA;;;;;;;AAwBe,SAAA,YAAA,CAAA,YAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAKI;QACX,CAAA,MAAA,EAAA,SAAA,IAAsBA,QAAQ,CAApC,YAAoC,C;MACpC,U;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU,GAAG,IAAbA,eAAa,EAAbA;UACMC,OAAO,GAAG,MAAM,CAAN,UAAM,CAAN,CAAA,IAAA,CAAyBC,MAAD,IAAe;;;UAGjD,CAACF,UAAU,CAAVA,MAAAA,CAAL,O,EAAgC;AAC9BG,QAAAA,SAAS,CAATA,MAAS,CAATA;;;aAEF,M;AANF,KAAgB,C;WAQT,MAAM;AACXA,MAAAA,SAAS,CADE,YACF,CAATA,CADW,CAAA;;AAGXF,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;AACAD,MAAAA,UAAU,CAAVA,KAAAA;AAJF,K;AAVO,GAAA,EAATD,IAAS,CAATA;SAiBO,CAAA,MAAA,EAAS,MAAMC,UAAU,CAAhC,KAAsBA,EAAf,C;ECjDT;;;AAUe,SAAA,UAAA,CAAA,QAAA,EAAgD;AAC7DD,EAAAA,SAAS,CAAC,MAAM;WACP,MAAM;AACXK,MAAAA,QAAQ;AADV,K;AADO,GAAA,EAATL,EAAS,CAATA;ECXF;;;AAUe,SAAA,gBAAA,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,YAAA,EAMb;AACAA,EAAAA,SAAS,CACP,MAAM;QACJ,M,EAAY;AACVM,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,IAAAA,EAAAA,OAAAA;aACO,MAAMA,MAAM,CAANA,mBAAAA,CAAAA,IAAAA,EAAb,OAAaA,C;;AAJV,GAAA,EAOP,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAuB,GAPzBN,YAOE,CAPO,CAATA;ECjBF;;;AAUe,SAAA,iBAAA,CAAA,QAAA,EAAA,OAAA,EAAA,YAAA,EAIP;;QAEAO,KAAK,GAAGC,MAFR,E,CAAA,CAAA;;;WAKN,oB,CAAA,Q,EAAwC;AACtCD,IAAAA,KAAK,CAALA,OAAAA,GAAgBE,qBAAqB,CAAEC,SAAD,IAAe;AACnDC,MAAAA,oBAAoB,CAApBA,QAAoB,CAApBA;aACOC,QAAQ,CAAf,SAAe,C;AAFjBL,KAAqC,CAArCA;;;AAMFP,EAAAA,SAAS,CACP,MAAM;QACA,CAAJ,O,EAAc;AACZW,MAAAA,oBAAoB,CAApBA,QAAoB,CAApBA;;;WAEK,SAAA,OAAA,GAAmB;UACpBJ,KAAK,CAAT,O,EAAmB;AACjBM,QAAAA,oBAAoB,CAACN,KAAK,CAA1BM,OAAoB,CAApBA;;AAFJ,K;AALK,GAAA,EAWP,CAAA,QAAA,EAAA,OAAA,EAAoB,GAXtBb,YAWE,CAXO,CAATA;EC3BF","sourcesContent":["// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useState, useEffect } from \"react\";\n\n// https://github.com/flow-typed/flow-typed/issues/1652\ndeclare interface AbortSignal extends EventTarget {\n  +aborted: boolean;\n  onabort: EventHandler;\n}\ndeclare class AbortController {\n  +signal: AbortSignal;\n  abort: () => void;\n}\n\n// A react hook which can be used to load async, disposable resources\n// and fire the cleanup callback when the component unmounts.\n// If the component unmounts before the async operation completes the\n// resource will still be cleaned up once it finishes loading and an\n// abort signal will be issued to the async load operation.\nexport default function useAbortable<T>(\n  defaultValue: T,\n  action: (AbortController) => Promise<T>,\n  cleanup: (?T) => void,\n  args: any\n): [T, () => void] {\n  const [result, setResult] = useState<T>(defaultValue);\n  let controller;\n  useEffect(() => {\n    controller = new AbortController();\n    const promise = action(controller).then((result: T) => {\n      // If we're aborted don't set the result into state.\n      // The cleanup will be called when the component unmounts.\n      if (!controller.signal.aborted) {\n        setResult(result);\n      }\n      return result;\n    });\n    return () => {\n      setResult(defaultValue);\n      // on unmount or args changing clean up the old value\n      promise.then(cleanup);\n      controller.abort();\n    };\n  }, args);\n  return [result, () => controller.abort()];\n}\n","// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useEffect } from \"react\";\n\n// A small React hook to fire the cleanup callback when the component unmounts.\nexport default function useCleanup(teardown: () => void): void {\n  useEffect(() => {\n    return () => {\n      teardown();\n    };\n  }, []);\n}\n","// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useEffect } from \"react\";\n\n// for adding and automatically removing event listeners\nexport default function useEventListener(\n  target: Element,\n  type: string,\n  enable: boolean,\n  handler: (any) => void,\n  dependencies: any[]\n) {\n  useEffect(\n    () => {\n      if (enable) {\n        target.addEventListener(type, handler);\n        return () => target.removeEventListener(type, handler);\n      }\n    },\n    [target, type, enable, ...dependencies]\n  );\n}\n","// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useRef, useEffect } from \"react\";\n\n// A React hook that accepts a callback function which will be called before each animation frame.\nexport default function useAnimationFrame(\n  callback: (timestamp: number) => void,\n  disable: boolean,\n  dependencies: any[]\n): void {\n  // persist the requestAnimationFrameId so the last refresh callback can be cancelled when component unmounts\n  const rafId = useRef();\n  // start the loop when the component mounts and cancel the animation frame when unmounts\n  // or related dependency changes\n  function createAnimationFrame(callback) {\n    rafId.current = requestAnimationFrame((timestamp) => {\n      createAnimationFrame(callback);\n      return callback(timestamp);\n    });\n  }\n\n  useEffect(\n    () => {\n      if (!disable) {\n        createAnimationFrame(callback);\n      }\n      return function cleanup() {\n        if (rafId.current) {\n          cancelAnimationFrame(rafId.current);\n        }\n      };\n    },\n    [callback, disable, ...dependencies]\n  );\n}\n","//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nexport { default as useAbortable } from \"./useAbortable\";\nexport { default as useCleanup } from \"./useCleanup\";\nexport { default as useEventListener } from \"./useEventListener\";\nexport { default as useAnimationFrame } from \"./useAnimationFrame\";\n"]},"metadata":{},"sourceType":"module"}