{"ast":null,"code":"'use strict';\n/**\n * @module distance-to-line-segment \n */\n\n/**\n* Calculate the square of the distance between a finite line segment and a point. This \n* version takes somewhat less convenient parameters than distanceToLineSegment.squared,\n* but is more efficient if you are calling it multiple times for the same line segment,\n* since you pass in some easily pre-calculated values for the segment.\n* @alias module:distance-to-line-segment.squaredWithPrecalc\n* @param {number} lx1 - x-coordinate of line segment's first point\n* @param {number} ly1 - y-coordinate of line segment's first point\n* @param {number} ldx - x-coordinate of the line segment's second point minus lx1\n* @param {number} ldy - y-coordinate of the line segment's second point minus ly1\n* @param {number} lineLengthSquared - must be ldx\\*ldx + ldy\\*ldy. Remember, this precalculation\n*    is for efficiency when calling this multiple times for the same line segment.\n* @param {number} px - x coordinate of point\n* @param {number} py - y coordinate of point\n*/\n\nfunction distanceSquaredToLineSegment2(lx1, ly1, ldx, ldy, lineLengthSquared, px, py) {\n  var t; // t===0 at line pt 1 and t ===1 at line pt 2\n\n  if (!lineLengthSquared) {\n    // 0-length line segment. Any t will return same result\n    t = 0;\n  } else {\n    t = ((px - lx1) * ldx + (py - ly1) * ldy) / lineLengthSquared;\n    if (t < 0) t = 0;else if (t > 1) t = 1;\n  }\n\n  var lx = lx1 + t * ldx,\n      ly = ly1 + t * ldy,\n      dx = px - lx,\n      dy = py - ly;\n  return dx * dx + dy * dy;\n}\n/**\n* Calculate the square of the distance between a finite line segment and a point. \n* @alias module:distance-to-line-segment.squared\n* @param {number} lx1 - x-coordinate of line segment's first point\n* @param {number} ly1 - y-coordinate of line segment's first point\n* @param {number} lx2 - x-coordinate of the line segment's second point\n* @param {number} ly2 - y-coordinate of the line segment's second point\n* @param {number} px - x coordinate of point\n* @param {number} py - y coordinate of point\n*/\n\n\nfunction distanceSquaredToLineSegment(lx1, ly1, lx2, ly2, px, py) {\n  var ldx = lx2 - lx1,\n      ldy = ly2 - ly1,\n      lineLengthSquared = ldx * ldx + ldy * ldy;\n  return distanceSquaredToLineSegment2(lx1, ly1, ldx, ldy, lineLengthSquared, px, py);\n}\n/**\n* Calculate the distance between a finite line segment and a point. Using distanceToLineSegment.squared can often be more efficient.\n* @alias module:distance-to-line-segment\n* @param {number} lx1 - x-coordinate of line segment's first point\n* @param {number} ly1 - y-coordinate of line segment's first point\n* @param {number} lx2 - x-coordinate of the line segment's second point\n* @param {number} ly2 - y-coordinate of the line segment's second point\n* @param {number} px - x coordinate of point\n* @param {number} py - y coordinate of point\n*/\n\n\nfunction distanceToLineSegment(lx1, ly1, lx2, ly2, px, py) {\n  return Math.sqrt(distanceSquaredToLineSegment(lx1, ly1, lx2, ly2, px, py));\n}\n\ndistanceToLineSegment.squared = distanceSquaredToLineSegment;\ndistanceToLineSegment.squaredWithPrecalc = distanceSquaredToLineSegment2;\nmodule.exports = distanceToLineSegment;","map":{"version":3,"sources":["/home/rodas/catkin_ws/src/autoROS/src/roscar_server/node_modules/distance-to-line-segment/index.js"],"names":["distanceSquaredToLineSegment2","lx1","ly1","ldx","ldy","lineLengthSquared","px","py","t","lx","ly","dx","dy","distanceSquaredToLineSegment","lx2","ly2","distanceToLineSegment","Math","sqrt","squared","squaredWithPrecalc","module","exports"],"mappings":"AAAA;AAEA;;;;AAKA;;;;;;;;;;;;;;;;AAgBA,SAASA,6BAAT,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,GAAjD,EAAsDC,GAAtD,EAA2DC,iBAA3D,EAA8EC,EAA9E,EAAkFC,EAAlF,EAAsF;AACnF,MAAIC,CAAJ,CADmF,CAC5E;;AACP,MAAI,CAACH,iBAAL,EAAwB;AACrB;AACAG,IAAAA,CAAC,GAAG,CAAJ;AACF,GAHD,MAIK;AACFA,IAAAA,CAAC,GAAG,CAAC,CAACF,EAAE,GAAGL,GAAN,IAAaE,GAAb,GAAmB,CAACI,EAAE,GAAGL,GAAN,IAAaE,GAAjC,IAAwCC,iBAA5C;AAEA,QAAIG,CAAC,GAAG,CAAR,EACGA,CAAC,GAAG,CAAJ,CADH,KAEK,IAAIA,CAAC,GAAG,CAAR,EACFA,CAAC,GAAG,CAAJ;AACL;;AAED,MAAIC,EAAE,GAAGR,GAAG,GAAGO,CAAC,GAAGL,GAAnB;AAAA,MACIO,EAAE,GAAGR,GAAG,GAAGM,CAAC,GAAGJ,GADnB;AAAA,MAEIO,EAAE,GAAGL,EAAE,GAAGG,EAFd;AAAA,MAGIG,EAAE,GAAGL,EAAE,GAAGG,EAHd;AAIA,SAAOC,EAAE,GAACA,EAAH,GAAQC,EAAE,GAACA,EAAlB;AACF;AAED;;;;;;;;;;;;AAWA,SAASC,4BAAT,CAAsCZ,GAAtC,EAA2CC,GAA3C,EAAgDY,GAAhD,EAAqDC,GAArD,EAA0DT,EAA1D,EAA8DC,EAA9D,EAAkE;AAC/D,MAAIJ,GAAG,GAAGW,GAAG,GAAGb,GAAhB;AAAA,MACIG,GAAG,GAAGW,GAAG,GAAGb,GADhB;AAAA,MAEIG,iBAAiB,GAAGF,GAAG,GAACA,GAAJ,GAAUC,GAAG,GAACA,GAFtC;AAGA,SAAOJ,6BAA6B,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EAAqBC,iBAArB,EAAwCC,EAAxC,EAA4CC,EAA5C,CAApC;AACF;AAED;;;;;;;;;;;;AAWA,SAASS,qBAAT,CAA+Bf,GAA/B,EAAoCC,GAApC,EAAyCY,GAAzC,EAA8CC,GAA9C,EAAmDT,EAAnD,EAAuDC,EAAvD,EACA;AACG,SAAOU,IAAI,CAACC,IAAL,CAAUL,4BAA4B,CAACZ,GAAD,EAAMC,GAAN,EAAWY,GAAX,EAAgBC,GAAhB,EAAqBT,EAArB,EAAyBC,EAAzB,CAAtC,CAAP;AACF;;AAGDS,qBAAqB,CAACG,OAAtB,GAAgCN,4BAAhC;AACAG,qBAAqB,CAACI,kBAAtB,GAA2CpB,6BAA3C;AACAqB,MAAM,CAACC,OAAP,GAAiBN,qBAAjB","sourcesContent":["'use strict';\n\n/**\n * @module distance-to-line-segment \n */\n\n\n/**\n* Calculate the square of the distance between a finite line segment and a point. This \n* version takes somewhat less convenient parameters than distanceToLineSegment.squared,\n* but is more efficient if you are calling it multiple times for the same line segment,\n* since you pass in some easily pre-calculated values for the segment.\n* @alias module:distance-to-line-segment.squaredWithPrecalc\n* @param {number} lx1 - x-coordinate of line segment's first point\n* @param {number} ly1 - y-coordinate of line segment's first point\n* @param {number} ldx - x-coordinate of the line segment's second point minus lx1\n* @param {number} ldy - y-coordinate of the line segment's second point minus ly1\n* @param {number} lineLengthSquared - must be ldx\\*ldx + ldy\\*ldy. Remember, this precalculation\n*    is for efficiency when calling this multiple times for the same line segment.\n* @param {number} px - x coordinate of point\n* @param {number} py - y coordinate of point\n*/\n\nfunction distanceSquaredToLineSegment2(lx1, ly1, ldx, ldy, lineLengthSquared, px, py) {\n   var t; // t===0 at line pt 1 and t ===1 at line pt 2\n   if (!lineLengthSquared) {\n      // 0-length line segment. Any t will return same result\n      t = 0;\n   }\n   else {\n      t = ((px - lx1) * ldx + (py - ly1) * ldy) / lineLengthSquared;\n\n      if (t < 0)\n         t = 0;\n      else if (t > 1)\n         t = 1;\n   }\n   \n   var lx = lx1 + t * ldx,\n       ly = ly1 + t * ldy,\n       dx = px - lx,\n       dy = py - ly;\n   return dx*dx + dy*dy;   \n}\n\n/**\n* Calculate the square of the distance between a finite line segment and a point. \n* @alias module:distance-to-line-segment.squared\n* @param {number} lx1 - x-coordinate of line segment's first point\n* @param {number} ly1 - y-coordinate of line segment's first point\n* @param {number} lx2 - x-coordinate of the line segment's second point\n* @param {number} ly2 - y-coordinate of the line segment's second point\n* @param {number} px - x coordinate of point\n* @param {number} py - y coordinate of point\n*/\n\nfunction distanceSquaredToLineSegment(lx1, ly1, lx2, ly2, px, py) {\n   var ldx = lx2 - lx1,\n       ldy = ly2 - ly1,\n       lineLengthSquared = ldx*ldx + ldy*ldy;\n   return distanceSquaredToLineSegment2(lx1, ly1, ldx, ldy, lineLengthSquared, px, py);\n}\n\n/**\n* Calculate the distance between a finite line segment and a point. Using distanceToLineSegment.squared can often be more efficient.\n* @alias module:distance-to-line-segment\n* @param {number} lx1 - x-coordinate of line segment's first point\n* @param {number} ly1 - y-coordinate of line segment's first point\n* @param {number} lx2 - x-coordinate of the line segment's second point\n* @param {number} ly2 - y-coordinate of the line segment's second point\n* @param {number} px - x coordinate of point\n* @param {number} py - y coordinate of point\n*/\n\nfunction distanceToLineSegment(lx1, ly1, lx2, ly2, px, py)\n{\n   return Math.sqrt(distanceSquaredToLineSegment(lx1, ly1, lx2, ly2, px, py));\n}\n\n\ndistanceToLineSegment.squared = distanceSquaredToLineSegment;\ndistanceToLineSegment.squaredWithPrecalc = distanceSquaredToLineSegment2;\nmodule.exports = distanceToLineSegment;\n"]},"metadata":{},"sourceType":"script"}