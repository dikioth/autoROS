{"version":3,"file":"index.umd.js","sources":["../src/useAbortable.js","../src/useCleanup.js","../src/useEventListener.js","../src/useAnimationFrame.js"],"sourcesContent":["// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useState, useEffect } from \"react\";\n\n// https://github.com/flow-typed/flow-typed/issues/1652\ndeclare interface AbortSignal extends EventTarget {\n  +aborted: boolean;\n  onabort: EventHandler;\n}\ndeclare class AbortController {\n  +signal: AbortSignal;\n  abort: () => void;\n}\n\n// A react hook which can be used to load async, disposable resources\n// and fire the cleanup callback when the component unmounts.\n// If the component unmounts before the async operation completes the\n// resource will still be cleaned up once it finishes loading and an\n// abort signal will be issued to the async load operation.\nexport default function useAbortable<T>(\n  defaultValue: T,\n  action: (AbortController) => Promise<T>,\n  cleanup: (?T) => void,\n  args: any\n): [T, () => void] {\n  const [result, setResult] = useState<T>(defaultValue);\n  let controller;\n  useEffect(() => {\n    controller = new AbortController();\n    const promise = action(controller).then((result: T) => {\n      // If we're aborted don't set the result into state.\n      // The cleanup will be called when the component unmounts.\n      if (!controller.signal.aborted) {\n        setResult(result);\n      }\n      return result;\n    });\n    return () => {\n      setResult(defaultValue);\n      // on unmount or args changing clean up the old value\n      promise.then(cleanup);\n      controller.abort();\n    };\n  }, args);\n  return [result, () => controller.abort()];\n}\n","// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useEffect } from \"react\";\n\n// A small React hook to fire the cleanup callback when the component unmounts.\nexport default function useCleanup(teardown: () => void): void {\n  useEffect(() => {\n    return () => {\n      teardown();\n    };\n  }, []);\n}\n","// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useEffect } from \"react\";\n\n// for adding and automatically removing event listeners\nexport default function useEventListener(\n  target: Element,\n  type: string,\n  enable: boolean,\n  handler: (any) => void,\n  dependencies: any[]\n) {\n  useEffect(\n    () => {\n      if (enable) {\n        target.addEventListener(type, handler);\n        return () => target.removeEventListener(type, handler);\n      }\n    },\n    [target, type, enable, ...dependencies]\n  );\n}\n","// @flow\n//\n//  Copyright (c) 2018-present, GM Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport { useRef, useEffect } from \"react\";\n\n// A React hook that accepts a callback function which will be called before each animation frame.\nexport default function useAnimationFrame(\n  callback: (timestamp: number) => void,\n  disable: boolean,\n  dependencies: any[]\n): void {\n  // persist the requestAnimationFrameId so the last refresh callback can be cancelled when component unmounts\n  const rafId = useRef();\n  // start the loop when the component mounts and cancel the animation frame when unmounts\n  // or related dependency changes\n  function createAnimationFrame(callback) {\n    rafId.current = requestAnimationFrame((timestamp) => {\n      createAnimationFrame(callback);\n      return callback(timestamp);\n    });\n  }\n\n  useEffect(\n    () => {\n      if (!disable) {\n        createAnimationFrame(callback);\n      }\n      return function cleanup() {\n        if (rafId.current) {\n          cancelAnimationFrame(rafId.current);\n        }\n      };\n    },\n    [callback, disable, ...dependencies]\n  );\n}\n"],"names":["defaultValue","action","cleanup","args","result","setResult","useState","controller","useEffect","AbortController","promise","then","signal","aborted","abort","teardown","target","type","enable","handler","dependencies","addEventListener","removeEventListener","callback","disable","rafId","useRef","createAnimationFrame","current","requestAnimationFrame","timestamp","cancelAnimationFrame"],"mappings":"mEAyBe,SACbA,EACAC,EACAC,EACAC,SAEOC,EAAQC,GAAaC,WAAYN,OACpCO,SACJC,YAAU,KACRD,EAAa,IAAIE,sBACXC,EAAUT,EAAOM,GAAYI,KAAMP,IAGlCG,EAAWK,OAAOC,SACrBR,EAAUD,GAELA,UAEF,KACLC,EAAUL,GAEVU,EAAQC,KAAKT,GACbK,EAAWO,UAEZX,GACI,CAACC,EAAQ,IAAMG,EAAWO,uBCvCpB,SAAoBC,GACjCP,YAAU,IACD,KACLO,KAED,wBCLU,SACbC,EACAC,EACAC,EACAC,EACAC,GAEAZ,YACE,QACMU,SACFF,EAAOK,iBAAiBJ,EAAME,GACvB,IAAMH,EAAOM,oBAAoBL,EAAME,IAGlD,CAACH,EAAQC,EAAMC,KAAWE,yBCdf,SACbG,EACAC,EACAJ,SAGMK,EAAQC,WAUdlB,YACE,KACOgB,YATAG,EAAqBJ,GAC5BE,EAAMG,QAAUC,sBAAuBC,IACrCH,EAAqBJ,GACdA,EAASO,KAOdH,CAAqBJ,GAEhB,WACDE,EAAMG,SACRG,qBAAqBN,EAAMG,WAIjC,CAACL,EAAUC,KAAYJ"}